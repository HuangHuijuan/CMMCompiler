/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. token.jj */
/*@egen*//*1\u3002\u4e0d\u652f\u6301\u4e2d\u6587\u6ce8\u91ca
2.\u4e0d\u652f\u6301int a =9 ,b =10; \u652f\u6301int a,b =9;
3.if ,while\u540e\u9762\u7684\u8bed\u53e5\u4e00\u5b9a\u8981{} else\u53ef\u4ee5\u6ca1\u6709
4.\u5df2\u7528\u6240\u7528\u6309\u4e0a\u9762\u4e09\u6761\u4fee\u6539\u540e\u7684\u7528\u4f8b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5168\u90e8\u901a\u8fc7
*/
options {
               
    KEEP_LINE_COLUMN = false;
    
}

PARSER_BEGIN(Parse)

public class Parse/*@bgen(jjtree)*/implements ParseTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParseState jjtree = new JJTParseState();

/*@egen*/
    
    public static void main(String args[]) throws ParseException {
    Parse parser = new Parse(System.in);
    
    try {
	ASTstart n = parser.start();
	n.dump("");	
	System.out.println("OK.");
    } catch (Exception e) {
    System.out.println("Error");
    System.out.println(e.getMessage());
    parser.ReInit(System.in);
    } catch (Error e) {
    System.out.println("Error");
    System.out.println(e.getMessage());
    
    }
    
    }
}

PARSER_END(Parse)

SKIP :
{
    " "
        |	"\r"
        |	"\t"
        |	"\n"
        | < "//"(~["\n","\r"])*("\n"|"\r"|"\r\n") >
        | < "/*"(~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
TOKEN:
{
    <ASSIGN:"=">
    | <GT:">">
    | <LT:"<">
    | <EQ:"==">
    | <LE:"<=">
    | <GE:">=">
    | <NE:"!="
    | "<>">
    | <AND:"&&">
    | <OR:"||">
    | <COMMA:",">
}
TOKEN:
{
    
    <BOOLEAN:"boolean">
    |<CHAR:"char">
    |<INT:"int">
    |<REAL:"real">
}
TOKEN : 
{
    < PLUS: "+" >
    |<MINUS: "-" >
    |<MULTIPLY: "*" >
    |<DIVIDE: "/" >
    |<MOD:"%">
}
TOKEN :
{
    
    < INTEGER:["1"-"9"](<DIGIT>)*
    |(<DIGIT>)+>
    |<STRING:["\""](~["\""])*["\""]>
    |<DOUBLE:(<DIGIT>)+"."
    |(<DIGIT>)+"."(<DIGIT>)+
    |"."(<DIGIT>)+>
    | < #DIGIT : [ "0"-"9" ] >
    
}
TOKEN:
{
    <BREAK:"break">
    | <ELSE:"else">
    | <WHILE:"while">
    | <IF:"if">
    | <TRUE:"true">
    |<FALSE:"false">
    |<WRITE:"write">
    |<READ:"read">
    |<END:"end">
}



TOKEN:
{
    <LC:"(">
    | <RC:")">
    | <LM:"[">
    | <RM:"]">
    | <LB:"{">
    | <RB:"}">
}
TOKEN:
{
    <ID:<LETTER>(<LETTER>| <DIGIT>| "_")*>
    | <#LETTER:["a"-"z", "A"-"Z","$"]>
}

ASTstart start():{/*@bgen(jjtree) start */
  ASTstart jjtn000 = new ASTstart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) start */
    try {
/*@egen*/
    program()<END>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{
        return jjtn000;
        }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void program():{/*@bgen(jjtree) program */
  ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) program */
    try {
/*@egen*/
    statement()statements()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void statements():{/*@bgen(jjtree) statements */
  ASTstatements jjtn000 = new ASTstatements(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) statements */
    try {
/*@egen*/
    (program())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void statement():{/*@bgen(jjtree) statement */
  ASTstatement jjtn000 = new ASTstatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) statement */
    try {
/*@egen*/
    assignment()";"
    |declaration()";"
    |ifstatement()
    |whilestatement()
    |readstatement()";"
    |writestatement()";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ifstatement():{/*@bgen(jjtree) ifstatement */
  ASTifstatement jjtn000 = new ASTifstatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
    {/*@bgen(jjtree) ifstatement */
    try {
/*@egen*/
    <IF><LC>condition()<RC>
    <LB>statements()<RB>
    (
    <ELSE>(<LB>statements()<RB>|statement())
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
        
}
void condition():{/*@bgen(jjtree) condition */
  ASTcondition jjtn000 = new ASTcondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) condition */
    try {
/*@egen*/    expression()(<EQ>/*@bgen(jjtree) #EQNode( 2) */
                      {
                        ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/              | <NE>/*@bgen(jjtree) #NENode( 2) */
           {
             ASTNENode jjtn002 = new ASTNENode(JJTNENODE);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*/ expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  2);
             }
           }
/*@egen*/              | <GT>/*@bgen(jjtree) #GTNode( 2) */
           {
             ASTGTNode jjtn003 = new ASTGTNode(JJTGTNODE);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
           }
           try {
/*@egen*/ expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte003) {
             if (jjtc003) {
               jjtree.clearNodeScope(jjtn003);
               jjtc003 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte003 instanceof RuntimeException) {
               throw (RuntimeException)jjte003;
             }
             if (jjte003 instanceof ParseException) {
               throw (ParseException)jjte003;
             }
             throw (Error)jjte003;
           } finally {
             if (jjtc003) {
               jjtree.closeNodeScope(jjtn003,  2);
             }
           }
/*@egen*/              | <LT>/*@bgen(jjtree) #LTNode( 2) */
           {
             ASTLTNode jjtn004 = new ASTLTNode(JJTLTNODE);
             boolean jjtc004 = true;
             jjtree.openNodeScope(jjtn004);
           }
           try {
/*@egen*/ expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte004) {
             if (jjtc004) {
               jjtree.clearNodeScope(jjtn004);
               jjtc004 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte004 instanceof RuntimeException) {
               throw (RuntimeException)jjte004;
             }
             if (jjte004 instanceof ParseException) {
               throw (ParseException)jjte004;
             }
             throw (Error)jjte004;
           } finally {
             if (jjtc004) {
               jjtree.closeNodeScope(jjtn004,  2);
             }
           }
/*@egen*/              | <LE>/*@bgen(jjtree) #LENode( 2) */
           {
             ASTLENode jjtn005 = new ASTLENode(JJTLENODE);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
           }
           try {
/*@egen*/ expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte005) {
             if (jjtc005) {
               jjtree.clearNodeScope(jjtn005);
               jjtc005 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte005 instanceof RuntimeException) {
               throw (RuntimeException)jjte005;
             }
             if (jjte005 instanceof ParseException) {
               throw (ParseException)jjte005;
             }
             throw (Error)jjte005;
           } finally {
             if (jjtc005) {
               jjtree.closeNodeScope(jjtn005,  2);
             }
           }
/*@egen*/          
    | <GE>/*@bgen(jjtree) #GENode( 2) */
           {
             ASTGENode jjtn006 = new ASTGENode(JJTGENODE);
             boolean jjtc006 = true;
             jjtree.openNodeScope(jjtn006);
           }
           try {
/*@egen*/ expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte006) {
             if (jjtc006) {
               jjtree.clearNodeScope(jjtn006);
               jjtc006 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte006 instanceof RuntimeException) {
               throw (RuntimeException)jjte006;
             }
             if (jjte006 instanceof ParseException) {
               throw (ParseException)jjte006;
             }
             throw (Error)jjte006;
           } finally {
             if (jjtc006) {
               jjtree.closeNodeScope(jjtn006,  2);
             }
           }
/*@egen*/          
    | <AND>/*@bgen(jjtree) #ANDNode( 2) */
            {
              ASTANDNode jjtn007 = new ASTANDNode(JJTANDNODE);
              boolean jjtc007 = true;
              jjtree.openNodeScope(jjtn007);
            }
            try {
/*@egen*/ expression()/*@bgen(jjtree)*/
            } catch (Throwable jjte007) {
              if (jjtc007) {
                jjtree.clearNodeScope(jjtn007);
                jjtc007 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte007 instanceof RuntimeException) {
                throw (RuntimeException)jjte007;
              }
              if (jjte007 instanceof ParseException) {
                throw (ParseException)jjte007;
              }
              throw (Error)jjte007;
            } finally {
              if (jjtc007) {
                jjtree.closeNodeScope(jjtn007,  2);
              }
            }
/*@egen*/           
    | <OR>/*@bgen(jjtree) #ORNode( 2) */
           {
             ASTORNode jjtn008 = new ASTORNode(JJTORNODE);
             boolean jjtc008 = true;
             jjtree.openNodeScope(jjtn008);
           }
           try {
/*@egen*/ expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte008) {
             if (jjtc008) {
               jjtree.clearNodeScope(jjtn008);
               jjtc008 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte008 instanceof RuntimeException) {
               throw (RuntimeException)jjte008;
             }
             if (jjte008 instanceof ParseException) {
               throw (ParseException)jjte008;
             }
             throw (Error)jjte008;
           } finally {
             if (jjtc008) {
               jjtree.closeNodeScope(jjtn008,  2);
             }
           }
/*@egen*/           )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}
void expression():{/*@bgen(jjtree) expression */
  ASTexpression jjtn000 = new ASTexpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) expression */
        try {
/*@egen*/        term()(<PLUS>/*@bgen(jjtree) #PLUSNode( 2) */
                      {
                        ASTPLUSNode jjtn001 = new ASTPLUSNode(JJTPLUSNODE);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ term()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/                     | <MINUS>/*@bgen(jjtree) #MINUSNode( 2) */
                  {
                    ASTMINUSNode jjtn002 = new ASTMINUSNode(JJTMINUSNODE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ term()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/              )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}
void term():{/*@bgen(jjtree) term */
  ASTterm jjtn000 = new ASTterm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) term */
        try {
/*@egen*/        (factor())?(<MULTIPLY>/*@bgen(jjtree) #MULTINode( 2) */
                               {
                                 ASTMULTINode jjtn001 = new ASTMULTINode(JJTMULTINODE);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ factor()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
                               }
/*@egen*/                      | <DIVIDE>/*@bgen(jjtree) #DIVNode( 2) */
                   {
                     ASTDIVNode jjtn002 = new ASTDIVNode(JJTDIVNODE);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                   }
                   try {
/*@egen*/ factor()/*@bgen(jjtree)*/
                   } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       throw (RuntimeException)jjte002;
                     }
                     if (jjte002 instanceof ParseException) {
                       throw (ParseException)jjte002;
                     }
                     throw (Error)jjte002;
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                     }
                   }
/*@egen*/            
        |<MOD>/*@bgen(jjtree) #MODNode( 2) */
              {
                ASTMODNode jjtn003 = new ASTMODNode(JJTMODNODE);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*/factor()/*@bgen(jjtree)*/
              } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  throw (RuntimeException)jjte003;
                }
                if (jjte003 instanceof ParseException) {
                  throw (ParseException)jjte003;
                }
                throw (Error)jjte003;
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  2);
                }
              }
/*@egen*/            )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}
void factor():{/*@bgen(jjtree) factor */
  ASTfactor jjtn000 = new ASTfactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) factor */
        try {
/*@egen*/        id()        | <LC>expression()<RC>        | integer()        | real()
        | string()
 	| bool()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}
void id():{/*@bgen(jjtree) id */
           ASTid jjtn000 = new ASTid(JJTID);
           boolean jjtc000 = true;
           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) id */
    try {
/*@egen*/
    t = <ID>(<LM>expression()<RM>)?/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void integer():{/*@bgen(jjtree) integer */
                ASTinteger jjtn000 = new ASTinteger(JJTINTEGER);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) integer */
try {
/*@egen*/
t = <INTEGER>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
void string():{/*@bgen(jjtree) string */
               ASTstring jjtn000 = new ASTstring(JJTSTRING);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) string */
try {
/*@egen*/
t = <STRING>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
void real():{/*@bgen(jjtree) real */
             ASTreal jjtn000 = new ASTreal(JJTREAL);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) real */
try {
/*@egen*/
t = <DOUBLE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
void bool():{/*@bgen(jjtree) bool */
             ASTbool jjtn000 = new ASTbool(JJTBOOL);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) bool */
try {
/*@egen*/
t = <TRUE>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.setName(t.image);}
|t = <FALSE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void whilestatement():{/*@bgen(jjtree) whilestatement */
  ASTwhilestatement jjtn000 = new ASTwhilestatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) whilestatement */
    try {
/*@egen*/
    <WHILE><LC>condition()<RC>(<LB>statements()<RB>)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
            
}
void declaration()     :{}{
    intDec()     |realDec()
    |boolDec() 
    |charDec()    }
void intDec():{/*@bgen(jjtree) intDec */
  ASTintDec jjtn000 = new ASTintDec(JJTINTDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) intDec */
try {
/*@egen*/
<INT> ids()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/  

}
void realDec():{/*@bgen(jjtree) realDec */
  ASTrealDec jjtn000 = new ASTrealDec(JJTREALDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) realDec */
try {
/*@egen*/

<REAL> ids()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/ 
}
void boolDec():{/*@bgen(jjtree) boolDec */
  ASTboolDec jjtn000 = new ASTboolDec(JJTBOOLDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) boolDec */
try {
/*@egen*/
<BOOLEAN> ids()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/  
}
void charDec():{/*@bgen(jjtree) charDec */
  ASTcharDec jjtn000 = new ASTcharDec(JJTCHARDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) charDec */
try {
/*@egen*/
<CHAR> ids()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


void ids():{/*@bgen(jjtree) ids */
  ASTids jjtn000 = new ASTids(JJTIDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ids */
  try {
/*@egen*/
  id()(<COMMA>id())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}
void assignment()              :{/*@bgen(jjtree) #ASSIGNNode( 2) */
  ASTASSIGNNode jjtn000 = new ASTASSIGNNode(JJTASSIGNNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) #ASSIGNNode( 2) */
 try {
/*@egen*/
 ids()<ASSIGN>expression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000,  2);
   }
 }
/*@egen*/}
void readstatement():{/*@bgen(jjtree) readstatement */
  ASTreadstatement jjtn000 = new ASTreadstatement(JJTREADSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) readstatement */
 try {
/*@egen*/
 <READ><LC>id()<RC>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void writestatement():{/*@bgen(jjtree) writestatement */
  ASTwritestatement jjtn000 = new ASTwritestatement(JJTWRITESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) writestatement */
 try {
/*@egen*/
 <WRITE><LC>expression()<RC>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}