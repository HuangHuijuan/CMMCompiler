/* Parse.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parse.java */
public class Parse/*@bgen(jjtree)*/implements ParseTreeConstants, ParseConstants {/*@bgen(jjtree)*/
  protected JJTParseState jjtree = new JJTParseState();
    public static void main(String args[]) throws ParseException {
    Parse parser = new Parse(System.in);

    try {
        ASTstart n = parser.start();
        n.dump("");
        System.out.println("OK.");
    } catch (Exception e) {
    System.out.println("Error");
    System.out.println(e.getMessage());
    parser.ReInit(System.in);
    } catch (Error e) {
    System.out.println("Error");
    System.out.println(e.getMessage());

    }

    }

  final public ASTstart start() throws ParseException {/*@bgen(jjtree) start */
  ASTstart jjtn000 = new ASTstart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      program();
      jj_consume_token(END);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void program() throws ParseException {/*@bgen(jjtree) program */
  ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      statement();
      statements();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void statements() throws ParseException {/*@bgen(jjtree) statements */
  ASTstatements jjtn000 = new ASTstatements(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INT:
      case REAL:
      case WHILE:
      case IF:
      case WRITE:
      case READ:
      case ID:{
        program();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void statement() throws ParseException {/*@bgen(jjtree) statement */
  ASTstatement jjtn000 = new ASTstatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        assignment();
        jj_consume_token(47);
        break;
        }
      case BOOLEAN:
      case CHAR:
      case INT:
      case REAL:{
        declaration();
        jj_consume_token(47);
        break;
        }
      case IF:{
        ifstatement();
        break;
        }
      case WHILE:{
        whilestatement();
        break;
        }
      case READ:{
        readstatement();
        jj_consume_token(47);
        break;
        }
      case WRITE:{
        writestatement();
        jj_consume_token(47);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ifstatement() throws ParseException {/*@bgen(jjtree) ifstatement */
  ASTifstatement jjtn000 = new ASTifstatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LC);
      condition();
      jj_consume_token(RC);
      jj_consume_token(LB);
      statements();
      jj_consume_token(RB);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        jj_consume_token(ELSE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LB:{
          jj_consume_token(LB);
          statements();
          jj_consume_token(RB);
          break;
          }
        case BOOLEAN:
        case CHAR:
        case INT:
        case REAL:
        case WHILE:
        case IF:
        case WRITE:
        case READ:
        case ID:{
          statement();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void condition() throws ParseException {/*@bgen(jjtree) condition */
  ASTcondition jjtn000 = new ASTcondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NE:
      case AND:
      case OR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
          try {
            expression();
          } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
          }
          break;
          }
        case NE:{
          jj_consume_token(NE);
ASTNENode jjtn002 = new ASTNENode(JJTNENODE);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
          try {
            expression();
          } catch (Throwable jjte002) {
if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte002;}
             }
             if (jjte002 instanceof ParseException) {
               {if (true) throw (ParseException)jjte002;}
             }
             {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  2);
             }
          }
          break;
          }
        case GT:{
          jj_consume_token(GT);
ASTGTNode jjtn003 = new ASTGTNode(JJTGTNODE);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
          try {
            expression();
          } catch (Throwable jjte003) {
if (jjtc003) {
               jjtree.clearNodeScope(jjtn003);
               jjtc003 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte003 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte003;}
             }
             if (jjte003 instanceof ParseException) {
               {if (true) throw (ParseException)jjte003;}
             }
             {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
               jjtree.closeNodeScope(jjtn003,  2);
             }
          }
          break;
          }
        case LT:{
          jj_consume_token(LT);
ASTLTNode jjtn004 = new ASTLTNode(JJTLTNODE);
             boolean jjtc004 = true;
             jjtree.openNodeScope(jjtn004);
          try {
            expression();
          } catch (Throwable jjte004) {
if (jjtc004) {
               jjtree.clearNodeScope(jjtn004);
               jjtc004 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte004 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte004;}
             }
             if (jjte004 instanceof ParseException) {
               {if (true) throw (ParseException)jjte004;}
             }
             {if (true) throw (Error)jjte004;}
          } finally {
if (jjtc004) {
               jjtree.closeNodeScope(jjtn004,  2);
             }
          }
          break;
          }
        case LE:{
          jj_consume_token(LE);
ASTLENode jjtn005 = new ASTLENode(JJTLENODE);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
          try {
            expression();
          } catch (Throwable jjte005) {
if (jjtc005) {
               jjtree.clearNodeScope(jjtn005);
               jjtc005 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte005 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte005;}
             }
             if (jjte005 instanceof ParseException) {
               {if (true) throw (ParseException)jjte005;}
             }
             {if (true) throw (Error)jjte005;}
          } finally {
if (jjtc005) {
               jjtree.closeNodeScope(jjtn005,  2);
             }
          }
          break;
          }
        case GE:{
          jj_consume_token(GE);
ASTGENode jjtn006 = new ASTGENode(JJTGENODE);
             boolean jjtc006 = true;
             jjtree.openNodeScope(jjtn006);
          try {
            expression();
          } catch (Throwable jjte006) {
if (jjtc006) {
               jjtree.clearNodeScope(jjtn006);
               jjtc006 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte006 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte006;}
             }
             if (jjte006 instanceof ParseException) {
               {if (true) throw (ParseException)jjte006;}
             }
             {if (true) throw (Error)jjte006;}
          } finally {
if (jjtc006) {
               jjtree.closeNodeScope(jjtn006,  2);
             }
          }
          break;
          }
        case AND:{
          jj_consume_token(AND);
ASTANDNode jjtn007 = new ASTANDNode(JJTANDNODE);
              boolean jjtc007 = true;
              jjtree.openNodeScope(jjtn007);
          try {
            expression();
          } catch (Throwable jjte007) {
if (jjtc007) {
                jjtree.clearNodeScope(jjtn007);
                jjtc007 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte007 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte007;}
              }
              if (jjte007 instanceof ParseException) {
                {if (true) throw (ParseException)jjte007;}
              }
              {if (true) throw (Error)jjte007;}
          } finally {
if (jjtc007) {
                jjtree.closeNodeScope(jjtn007,  2);
              }
          }
          break;
          }
        case OR:{
          jj_consume_token(OR);
ASTORNode jjtn008 = new ASTORNode(JJTORNODE);
             boolean jjtc008 = true;
             jjtree.openNodeScope(jjtn008);
          try {
            expression();
          } catch (Throwable jjte008) {
if (jjtc008) {
               jjtree.clearNodeScope(jjtn008);
               jjtc008 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte008 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte008;}
             }
             if (jjte008 instanceof ParseException) {
               {if (true) throw (ParseException)jjte008;}
             }
             {if (true) throw (Error)jjte008;}
          } finally {
if (jjtc008) {
               jjtree.closeNodeScope(jjtn008,  2);
             }
          }
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void expression() throws ParseException {/*@bgen(jjtree) expression */
  ASTexpression jjtn000 = new ASTexpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      term();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
ASTPLUSNode jjtn001 = new ASTPLUSNode(JJTPLUSNODE);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
          try {
            term();
          } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
          }
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
ASTMINUSNode jjtn002 = new ASTMINUSNode(JJTMINUSNODE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
          try {
            term();
          } catch (Throwable jjte002) {
if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
          }
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void term() throws ParseException {/*@bgen(jjtree) term */
  ASTterm jjtn000 = new ASTterm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case STRING:
      case DOUBLE:
      case TRUE:
      case FALSE:
      case LC:
      case ID:{
        factor();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case MOD:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTIPLY:{
          jj_consume_token(MULTIPLY);
ASTMULTINode jjtn001 = new ASTMULTINode(JJTMULTINODE);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
          try {
            factor();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
          }
          break;
          }
        case DIVIDE:{
          jj_consume_token(DIVIDE);
ASTDIVNode jjtn002 = new ASTDIVNode(JJTDIVNODE);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
          try {
            factor();
          } catch (Throwable jjte002) {
if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                     }
          }
          break;
          }
        case MOD:{
          jj_consume_token(MOD);
ASTMODNode jjtn003 = new ASTMODNode(JJTMODNODE);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
          try {
            factor();
          } catch (Throwable jjte003) {
if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte003;}
                }
                if (jjte003 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte003;}
                }
                {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  2);
                }
          }
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void factor() throws ParseException {/*@bgen(jjtree) factor */
  ASTfactor jjtn000 = new ASTfactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        id();
        break;
        }
      case LC:{
        jj_consume_token(LC);
        expression();
        jj_consume_token(RC);
        break;
        }
      case INTEGER:{
        integer();
        break;
        }
      case DOUBLE:{
        real();
        break;
        }
      case STRING:{
        string();
        break;
        }
      case TRUE:
      case FALSE:{
        bool();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void id() throws ParseException {/*@bgen(jjtree) id */
           ASTid jjtn000 = new ASTid(JJTID);
           boolean jjtc000 = true;
           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LM:{
        jj_consume_token(LM);
        expression();
        jj_consume_token(RM);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void integer() throws ParseException {/*@bgen(jjtree) integer */
                ASTinteger jjtn000 = new ASTinteger(JJTINTEGER);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void string() throws ParseException {/*@bgen(jjtree) string */
               ASTstring jjtn000 = new ASTstring(JJTSTRING);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void real() throws ParseException {/*@bgen(jjtree) real */
             ASTreal jjtn000 = new ASTreal(JJTREAL);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DOUBLE);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void bool() throws ParseException {/*@bgen(jjtree) bool */
             ASTbool jjtn000 = new ASTbool(JJTBOOL);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        t = jj_consume_token(TRUE);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void whilestatement() throws ParseException {/*@bgen(jjtree) whilestatement */
  ASTwhilestatement jjtn000 = new ASTwhilestatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LC);
      condition();
      jj_consume_token(RC);
      jj_consume_token(LB);
      statements();
      jj_consume_token(RB);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      intDec();
      break;
      }
    case REAL:{
      realDec();
      break;
      }
    case BOOLEAN:{
      boolDec();
      break;
      }
    case CHAR:{
      charDec();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void intDec() throws ParseException {/*@bgen(jjtree) intDec */
  ASTintDec jjtn000 = new ASTintDec(JJTINTDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INT);
      ids();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void realDec() throws ParseException {/*@bgen(jjtree) realDec */
  ASTrealDec jjtn000 = new ASTrealDec(JJTREALDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REAL);
      ids();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void boolDec() throws ParseException {/*@bgen(jjtree) boolDec */
  ASTboolDec jjtn000 = new ASTboolDec(JJTBOOLDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOLEAN);
      ids();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void charDec() throws ParseException {/*@bgen(jjtree) charDec */
  ASTcharDec jjtn000 = new ASTcharDec(JJTCHARDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CHAR);
      ids();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void ids() throws ParseException {/*@bgen(jjtree) ids */
  ASTids jjtn000 = new ASTids(JJTIDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      id();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        id();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void assignment() throws ParseException {/*@bgen(jjtree) #ASSIGNNode( 2) */
  ASTASSIGNNode jjtn000 = new ASTASSIGNNode(JJTASSIGNNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ids();
      jj_consume_token(ASSIGN);
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000,  2);
   }
    }
  }

  final public void readstatement() throws ParseException {/*@bgen(jjtree) readstatement */
  ASTreadstatement jjtn000 = new ASTreadstatement(JJTREADSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(READ);
      jj_consume_token(LC);
      id();
      jj_consume_token(RC);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void writestatement() throws ParseException {/*@bgen(jjtree) writestatement */
  ASTwritestatement jjtn000 = new ASTwritestatement(JJTWRITESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WRITE);
      jj_consume_token(LC);
      expression();
      jj_consume_token(RC);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  /** Generated Token Manager. */
  public ParseTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e0000,0x1e0000,0x80000000,0x1e0000,0xff00,0xff00,0x600000,0x600000,0x1c000000,0x3800000,0x3800000,0x1c000000,0x0,0x0,0x1e0000,0x10000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2033,0x2033,0x0,0x2833,0x0,0x0,0x0,0x0,0x208c,0x0,0x0,0x208c,0x200,0xc,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Parse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parse(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parse(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parse(ParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
